<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lvoooo.github.io</id>
    <title>lvoooo&apos;s memory</title>
    <updated>2019-08-29T08:30:43.566Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lvoooo.github.io"/>
    <link rel="self" href="https://lvoooo.github.io/atom.xml"/>
    <subtitle>治疗失忆。</subtitle>
    <logo>https://lvoooo.github.io/images/avatar.png</logo>
    <icon>https://lvoooo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, lvoooo&apos;s memory</rights>
    <entry>
        <title type="html"><![CDATA[Go 分页]]></title>
        <id>https://lvoooo.github.io/post/go-fen-ye</id>
        <link href="https://lvoooo.github.io/post/go-fen-ye">
        </link>
        <updated>2019-08-29T07:37:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="方法">方法</h3>
<p>https://www.v2ex.com/t/595976</p>
<p>增加有效可利用的索引，其目的是减少每次查询时的系统负载。</p>
<ol start="0">
<li>用固定页码做索引: 前提条件是页码总数只增不减少, pageTotal%pageSize 例如第 1-100 条数据的索引就是 index_page_1,以此类推.</li>
<li>每次携带最大的主键 id,使其查询时带上 id :例如: where id&gt;{maxId} limit 10</li>
<li>优化：根据现有业务按列分表,将用于排序的列数做最小拆分，尽量不要有大规模字符串,查询后用 in(ids)方式聚合</li>
<li>增加一个扩展表,用于分页: pagination(id,page_number) 原理同第 0 条</li>
</ol>
<h3 id="go-语言分页">Go 语言分页</h3>
<ol>
<li>https://github.com/ikaiguang/go-pagination</li>
</ol>
<pre><code>go get -v github.com/ikaiguang/go-pagination
go get -v github.com/ikaiguang/go-pagination-example
go test -v $GOPATH/src/github.com/ikaiguang/go-pagination-example
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go database/sql的连接池]]></title>
        <id>https://lvoooo.github.io/post/go-databasesql-de-lian-jie-chi</id>
        <link href="https://lvoooo.github.io/post/go-databasesql-de-lian-jie-chi">
        </link>
        <updated>2019-08-29T07:04:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="步骤">步骤</h3>
<pre><code>1. 注册驱动
2. 初始化DB
3. 获取连接
4. 释放连接
sql.go(Query()) -&gt; sql.go(QueryContext()) -&gt; sql.go(query()) -&gt; sql.go(conn())
conn()
如果连接池中有空闲的连接且没有过期的就直接拿出来用；
如果当前实际连接数已经超过最大连接数即上面case中提到的maxOpenConns，则将任务添加到任务队列中等待；
以上情况都不满足，则自行创建一个新的连接用于执行DB操作。
</code></pre>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6gk9qhhkmj30xm0oj41b.jpg" alt="database/sql"></p>
<h3 id="案例">案例</h3>
<pre><code>package main

import (
	db &quot;database/sql&quot;
	&quot;fmt&quot;
	//_ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;
	_ &quot;github.com/go-sql-driver/mysql&quot; //驱动注册
)

// 最大连接数为10，两个查询可以分别创建两个连接执行
func fewConns(){
	db, _ := db.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)
	db.SetMaxOpenConns(10)
	rows, err := db.Query(&quot;select * from videos where title = 'ed' limit 10&quot;)
	if err != nil {
		fmt.Println(err.Error())
		fmt.Println(&quot;query error&quot;)
	}
	fmt.Println(&quot;-----------------------------------------&quot;)
	row, _ := db.Query(&quot;select * from videos&quot;)
	fmt.Println(row, rows)

}

// 只有一个连接，被占用后没有被释放，会导致阻塞
func oneConn() {
	db, _ := db.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)

	db.SetMaxOpenConns(1)
	rows, err := db.Query(&quot;select * from videos where title = 'ed' limit 10&quot;)
	if err != nil {
		fmt.Println(err.Error())
		fmt.Println(&quot;query error&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	// 拿不到连接，可用的连接一直被上一次查询占用了。
	// 会阻塞连接
	row, _ := db.Query(&quot;select * from videos&quot;)
	fmt.Println(row, rows)
}

// 只有一个连接，调用了rows遍历代码，最后一次的时候会rows.Close() 释放连接
func oneConnWithRowsNext() {
	db, _ := db.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)

	db.SetMaxOpenConns(1)
	rows, err := db.Query(&quot;select * from videos where title = 'ed' limit 10&quot;)
	if err != nil {
		fmt.Println(err.Error())
		fmt.Println(&quot;query error&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	// 这里可以让下一次sql拿到链接
	for rows.Next() {
		fmt.Println(&quot;close&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	row, _ := db.Query(&quot;select * from videos&quot;)
	fmt.Println(row, rows)
}

// 最大1个连接，使用了rows遍历，但是没有释放连接
func oneConnWithRowsNextWithError() {
	db, _ := db.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)

	db.SetMaxOpenConns(1)
	rows, err := db.Query(&quot;select * from videos where title = 'ed' limit 10&quot;)
	if err != nil {
		fmt.Println(&quot;query error&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	// rows遍历的提前结束，会影响了后面查询
	i := 1
	for rows.Next() {
		i++
		if i == 3 {
			break
		}
		fmt.Println(&quot;close&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	row, _ := db.Query(&quot;select * from test&quot;)
	fmt.Println(row, rows)
}

// 最大1个连接，使用rows遍历，即使中途退出，但最后调用了rows.Close() 关闭，释放连接。
func oneConnWithRowsNextWithErrorWithRowsClose() {
	db, _ := db.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)

	db.SetMaxOpenConns(1)
	rows, err := db.Query(&quot;select * from videos where title = 'ed' limit 10&quot;)
	if err != nil {
		fmt.Println(&quot;query error&quot;)
	}

	fmt.Println(&quot;-----------------------------------------&quot;)
	// 调用了关闭rows的语句，继续执行第二次查询。
	i := 1
	for rows.Next() {
		i++
		if i == 3 {
			break
		}
		fmt.Println(&quot;close&quot;)
	}
	rows.Close()


	fmt.Println(&quot;-----------------------------------------&quot;)
	row, _ := db.Query(&quot;select * from videos&quot;)
	fmt.Println(row, rows)
}


func main()  {
	// maxConn &gt; 1
	fewConns()
	// maxConn = 1
	oneConn()

	// maxConn = 1 + for rows.Next()
	oneConnWithRowsNext()
	// maxConn = 1 + for rows.Next() + 提前退出
	oneConnWithRowsNextWithError()
	// maxConn = 1 + for rows.Next() + 提前退出 + defer rows.Close()
	oneConnWithRowsNextWithErrorWithRowsClose()
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[闲逛]]></title>
        <id>https://lvoooo.github.io/post/xian-guang</id>
        <link href="https://lvoooo.github.io/post/xian-guang">
        </link>
        <updated>2019-08-29T06:17:59.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.yeboke.cn/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go Profile&Debug]]></title>
        <id>https://lvoooo.github.io/post/go-profile</id>
        <link href="https://lvoooo.github.io/post/go-profile">
        </link>
        <updated>2019-08-27T08:53:28.000Z</updated>
        <content type="html"><![CDATA[<p>参考:<br>
https://blog.csdn.net/get_set/article/details/81229629<br>
https://mp.weixin.qq.com/s?__biz=MzI3MjU4Njk3Ng==&amp;mid=2247484253&amp;idx=2&amp;sn=3b640a7a4b3b9f10ed7400be740fcf5a</p>
<h3 id="benchmark">benchmark</h3>
<h4 id="benchmark测试有如下约定">benchmark测试有如下约定：</h4>
<ul>
<li>benchmark也是测试，因此也是以_test.go结尾的文件；</li>
<li>需要import testing；</li>
<li>测试方法以Benchmark开始，并且拥有一个*testing.B参数。</li>
</ul>
<pre><code>package main

import &quot;testing&quot;
import &quot;strings&quot;

func BenchmarkStringJoin1(b *testing.B) {
    input := []string{&quot;Hello&quot;, &quot;World&quot;}
    for i := 0; i &lt; b.N; i++ {
        result := strings.Join(input, &quot; &quot;)
        if result != &quot;Hello World&quot; {
            b.Error(&quot;Unexpected result: &quot; + result)
        }
    }
}
</code></pre>
<h4 id="相关命令">相关命令</h4>
<ol>
<li>go test -bench=. -run=NONE</li>
</ol>
<ul>
<li>-bench可以根据正则表达式筛选要测试的方法，这里的.表示匹配所有的测试方</li>
<li>-run=NONE表示忽略功能测试。</li>
</ul>
<p>输出</p>
<pre><code>goos: linux
goarch: amd64
pkg: hello/bench_test
BenchmarkStringJoin1-8      50000000            36.6 ns/op
PASS
ok      hello/bench_test    1.871s

</code></pre>
<ul>
<li>BenchmarkStringJoin1-8表示测试了哪个方法，8标识GOMAXPROCS的值，通常等于CPU物理线程数；</li>
<li>50000000即进行了50000000次测试，基准测试运行器开始并不知道这个操作耗时长短，所以开始的时候它使用一个比较小的N值，然后根据运行情况推算出合适的N值；</li>
<li>36.6 ns/op表示每个操作耗时36.6纳秒。</li>
</ul>
<ol start="2">
<li>go test -bench=. -benchmem</li>
</ol>
<pre><code>$ go test -bench=. -benchmem
goos: linux
goarch: amd64
pkg: hello/bench_test
BenchmarkStringJoin1-8      30000000            37.2 ns/op        16 B/op          1 allocs/op
PASS
ok      hello/bench_test    1.159s
</code></pre>
<ul>
<li>16 B/op表示每次操作需要16字节的内存；</li>
<li>1 allocs/op表示每次操作会进行一次内存分配。</li>
</ul>
<h3 id="profiling">profiling</h3>
<p>Go通过对执行过程进行采样，来获取profiling数据。具体来说支持如下几种性能指标：</p>
<ul>
<li>CPU profiling：用于识别出执行过程中需要CPU最多的函数。在每个CPU上面执行的线程每个几毫秒进行定期的中断，并在每次中断过程中记录一个性能剖析事件，然后恢复执行。</li>
<li>heap profiling：用于识别出负责分配最多内存的语句。</li>
<li>block profiling：用于识别出阻塞协程最久的操作，比如系统调用、通道发送、接收数据和获取锁等，性能分析库会在goroutine被这些操作阻塞的时候记录一个事件。</li>
</ul>
<ol>
<li>go test -bench . -cpuprofile=cpu.out -blockprofile=block.out -memprofile=mem.out</li>
<li>go tool pprof -text ./bench_test.test cpu.out</li>
<li>输出图片 go tool pprof -svg ./bench_test.test cpu.out &gt; cpu.svg</li>
<li>生成火焰图 go-torch -b cpu.out -f cpu.torch.svg</li>
</ol>
<h4 id="go-torch-安装">go-torch 安装</h4>
<pre><code>git clone --depth=1 https://github.com/brendangregg/FlameGraph.git ~/.flamegraph
export PATH=$PATH:~/.flamegraph

go get github.com/uber/go-torch
</code></pre>
<h3 id="godebug">GODEBUG</h3>
<p>http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html<br>
http://morsmachine.dk/go-scheduler</p>
<pre><code>GOMAXPROCS=1 GODEBUG=schedtrace=1000 ./example
GOMAXPROCS=2 GODEBUG=schedtrace=1000,scheddetail=1 ./example
</code></pre>
<pre><code>1009ms       : 时间是以毫秒为单位，表示了从程序开始运行的时间。这个是第一秒的跟踪信息。

gomaxprocs=1 : 配置的最大的处理器的个数
              本程序只配置了一个

更多说明：

这里的处理器是逻辑上的处理器而非物理上的处理器。调度器在这些逻辑处理器上运行 goroutines，这些逻辑处理器通过所附着的操作系统线程绑定在物理处理器上的。 操作系统将在可见的物理存储器上调度线程。

threads=3     : 运行时管理的线程个数。有三个线程存在，一个是给处理器使用，其他两个是被运行时使用。

idlethreads=1 : 空闲的线程个数。一个空闲，两个正在运行。

idleprocs=0   : 空闲的处理器个数。这里空闲个数为 0，有一个运行中。

runqueue=0   : 在全局运行队列中等待的 goroutinue 数量。所有可运行的 goroutinue 都被移到了本地的运行队列中。

[9]           : 本地运行队列中等待的 goroutine 数量。当前有 9 个 goroutine 在本地运行队列等待。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 命令]]></title>
        <id>https://lvoooo.github.io/post/linux-ming-ling</id>
        <link href="https://lvoooo.github.io/post/linux-ming-ling">
        </link>
        <updated>2019-08-27T07:37:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="压缩">压缩</h3>
<pre><code class="language-shell">xz -d ***.tar.xz
tar -xvf  ***.tar
</code></pre>
<h3 id="用户">用户</h3>
<pre><code class="language-text">#添加用户到sudoer列表中
root 账户键入visudo
实际上是在修改 /etc/sudoers
在 root ALL=(ALL) ALL
这一行，

修改：
username  ALL=(ALL)      ALL
username  ALL=(ALL)       NOPASSWD:ALL
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fabric]]></title>
        <id>https://lvoooo.github.io/post/fabric-ca</id>
        <link href="https://lvoooo.github.io/post/fabric-ca">
        </link>
        <updated>2019-08-13T09:46:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="fabric-ca">Fabric CA</h2>
<h3 id="安装">安装</h3>
<ol>
<li>sudo apt update</li>
<li>sudo apt install libtool libltdl-dev</li>
<li>go get -u github.com/hyperledger/fabric-ca</li>
<li>cd $GOPATH/src/github.com/hyperledger/fabric-ca/</li>
<li>make fabric-ca-server</li>
<li>make fabric-ca-client</li>
<li>export PATH=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">/</mi><mi>g</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>u</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>h</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>l</mi><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">/</mi><mi>f</mi><mi>a</mi><mi>b</mi><mi>r</mi><mi>i</mi><mi>c</mi><mo>−</mo><mi>c</mi><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">GOPATH/src/github.com/hyperledger/fabric-ca/bin:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>PATH</li>
</ol>
<h3 id="初始化">初始化</h3>
<ol>
<li>命令行 -home</li>
<li>FABRIC_CA_SERVER_HOME</li>
<li>FABRIC_CA_HOME</li>
<li>CA_CFG_PATH</li>
<li>使用当前目录</li>
</ol>
<h3 id="普通安装">普通安装</h3>
<ol>
<li>mkdir fabric-ca</li>
<li>cd fabric-ca</li>
<li>fabric-ca-server init -b admin:pass</li>
</ol>
<blockquote>
<p>admin 和 pass 是使用 ca 注册用户时候的用户名和密码<br>
默认在该目录下生成文件<br>
IssuerPublicKey<br>
IssuerRevocationPublicKey<br>
ca-cert.pem<br>
fabric-ca-server-config.yaml<br>
fabric-ca-server.db<br>
msp</p>
</blockquote>
<h2 id="fabric性能测试">Fabric性能测试</h2>
<h3 id="参考">参考</h3>
<ol>
<li>https://blog.csdn.net/get_set/article/details/81229629</li>
<li>https://github.com/hyperledger-archives/fabric/wiki/Profiling-the-Hyperledger-Fabric#other-profiling</li>
</ol>
<h3 id="配置">配置</h3>
<p>Dockerfile</p>
<pre><code># Orderer
- ORDERER_GENERAL_PROFILE_ENABLED=true

# Peer
- CORE_PEER_PROFILE_ENABLED=true

# Peer
</code></pre>
<h3 id="分析">分析</h3>
<pre><code># Peer

#生成  pb 文件
go tool pprof http://&lt;peer-ip&gt;:6060/debug/pprof/profile
~/pprof/pprof.peer.samples.cpu.001.pb.gz

# 生成 火焰图
go-torch -b pprof.peer.samples.cpu.001.pb.gz -f peer.cpu.torch.svg
peer.cpu.torch.svg

# Orderer

#生成  pb 文件
go tool pprof http://&lt;peer-ip&gt;:6060/debug/pprof/profile
~/pprof/pprof.orderer.samples.cpu.001.pb.gz

# 生成 火焰图
go-torch -b pprof.orderer.samples.cpu.001.pb.gz -f orderer.cpu.torch.svg
orderer.cpu.torch.svg
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NAT相关]]></title>
        <id>https://lvoooo.github.io/post/nat-xiang-guan</id>
        <link href="https://lvoooo.github.io/post/nat-xiang-guan">
        </link>
        <updated>2019-08-10T10:12:27.000Z</updated>
        <content type="html"><![CDATA[<p>类型（A-B）	建立状况<br>
<strong>完全锥型-完全锥型</strong>	A通过server获得B的IP:port开始通信<br>
<strong>完全锥型-IP限制型</strong>	B通过server获得A的IP:port开始通信<br>
<strong>完全锥型-port限制型</strong>	B通过server获得A的IP:port开始通信<br>
<strong>完全锥型-对称型</strong>	B通过server获得A的IP:port开始通信<br>
<strong>IP限制型-IP限制型</strong>	A通过server获得B的IP:port，A向B发送UDP包，数据通过自己的NAT时会为B建立NAT映射条目；B通过server获得A的IP:port，发送UDP包为A建立NAT映射条目，二者之后就可以开始通信。<br>
<strong>IP限制型-port限制型</strong>	A通过server获得B的IP:port，A向B发送UDP包，数据通过自己的NAT时会为B建立NAT映射条目；B通过server获得A的IP:port，发送UDP包为A建立NAT映射条目，二者之后就可以开始通信。<br>
<strong>IP限制型-对称型</strong>	A通过server获得B的IP:port1，A向B发送UDP包，数据通过自己的NAT时会为B建立NAT映射条目；B通过server获得A的IP:port，发送UDP包为A建立NAT映射条目，A收到B的UDP包，获得B新的IP:port2；A向B的新地址IP:port2发送数据，可以开始通信。<br>
<strong>port限制型-对称型</strong>	A通过server获得B的IP:port1，A向B发送UDP包，数据通过自己的NAT时会为B建立NAT映射条目；B通过server获得A的IP:port，发送UDP包为A建立NAT映射条目，但由于B更换了新端口port2，A刚建立的映射无法使用，A故此无法收到B为A通信使用的新端口，无法建立NAT映射，两者无法互通。<br>
<strong>对称型-对称型</strong>	同上，对称型开启新端口对方无法获悉，无法建立链接。<br>
无法P2P就需要用TURN服务器转发数据了…</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用工具]]></title>
        <id>https://lvoooo.github.io/post/chang-yong-gong-ju</id>
        <link href="https://lvoooo.github.io/post/chang-yong-gong-ju">
        </link>
        <updated>2019-07-28T09:20:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="teamviewer">TeamViewer</h3>
<h4 id="修改id">修改ID</h4>
<p><a href="https://blog.csdn.net/qq_39729527/article/details/86620987">参考链接</a></p>
<ol>
<li>退出TeamView账户，退出TeamView进程</li>
<li>编写 TeamViewer-id-changer.py</li>
<li>执行脚本</li>
<li>重启电脑</li>
</ol>
<pre><code>#!/usr/bin/env python 
#coding:utf-8
#  python2

import sys
import os
import glob
import platform
import re
import random
import string
 
print('''
--------------------------------
TeamViewer ID Changer for MAC OS
--------------------------------
''')
 
if platform.system() != 'Darwin':
    print('This script can be run only on MAC OS.')
    sys.exit();
 
if os.geteuid() != 0:
    print('This script must be run form root.')
    sys.exit();
 
if os.environ.has_key('SUDO_USER'):
    USERNAME = os.environ['SUDO_USER']
    if USERNAME == 'root':
       print('Can not find user name. Run this script via sudo from regular user')
       sys.exit();
else:
    print('Can not find user name. Run this script via sudo from regular user')
    sys.exit();
 
HOMEDIRLIB = '/Users/' + USERNAME  + '/Library/Preferences/'
GLOBALLIB  =  '/Library/Preferences/'
 
CONFIGS = []
 
# Find config files
 
def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]
 
for file in listdir_fullpath(HOMEDIRLIB):
    if 'teamviewer'.lower() in file.lower():
        CONFIGS.append(file)
 
if not CONFIGS:
    print ('''
There is no TemViewer configs found.
Maybe you have deleted it manualy or never run TeamViewer after installation.
Nothing to delete.
''')
# Delete config files
else:
    print(&quot;Configs found:\n&quot;)
    for file in CONFIGS:
        print file
 
    print('''
This files will be DELETED permanently.
All TeamViewer settings will be lost
''')
    raw_input(&quot;Press Enter to continue or CTR+C to abort...&quot;)
 
    for file in CONFIGS:
        try:
            os.remove(file)
        except:
            print(&quot;Cannot delete config files. Permission denied?&quot;)
            sys.exit();
    print(&quot;Done.&quot;)
 
# Find binaryes
 
TMBINARYES = [
'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer',
'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Service',
'/Applications/TeamViewer.app/Contents/Helpers/TeamViewer_Desktop',
]
 
for file in TMBINARYES:
    if os.path.exists(file):
        pass
    else:
        print(&quot;File not found: &quot; + file)
        print (&quot;Install TeamViewer correctly&quot;)
        sys.exit();
 
# Patch files
 
def idpatch(fpath,platf,serial):
    file = open(fpath, 'r+b')
    binary = file.read()
    PlatformPattern = &quot;IOPlatformExpert.{6}&quot;
    SerialPattern =  &quot;IOPlatformSerialNumber%s%s%sUUID&quot;
 
    binary = re.sub(PlatformPattern, platf, binary)
    binary = re.sub(SerialPattern % (chr(0), &quot;[0-9a-zA-Z]{8,8}&quot;, chr(0)), SerialPattern%(chr(0), serial, chr(0)), binary)
 
    file = open(fpath,'wb').write(binary)
    return True
 
def random_generator(size=8, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
 
RANDOMSERIAL = random_generator()
RANDOMPLATFORM = &quot;IOPlatformExpert&quot; + random_generator(6)
 
 
for file in TMBINARYES:
        try:
            idpatch(file,RANDOMPLATFORM,RANDOMSERIAL)
        except:
            print &quot;Error: can not patch file &quot; + file
            print &quot;Wrong version?&quot;
            sys.exit();
 
print &quot;PlatformDevice: &quot; + RANDOMPLATFORM
print &quot;PlatformSerial: &quot; + RANDOMSERIAL
 
print('''
ID changed sucessfully.
!!! Restart computer before using TeamViewer !!!!
''')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[框架]]></title>
        <id>https://lvoooo.github.io/post/kuang-jia</id>
        <link href="https://lvoooo.github.io/post/kuang-jia">
        </link>
        <updated>2019-07-25T10:46:28.000Z</updated>
        <content type="html"><![CDATA[<p>https://gin-gonic.com/docs/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql 连接方式以及配置]]></title>
        <id>https://lvoooo.github.io/post/mysql-lian-jie-fang-shi-yi-ji-pei-zhi</id>
        <link href="https://lvoooo.github.io/post/mysql-lian-jie-fang-shi-yi-ji-pei-zhi">
        </link>
        <updated>2019-07-10T03:10:11.000Z</updated>
        <content type="html"><![CDATA[<pre><code>mysql -h127.0.01 -uroot -p
mysql --socket=/var/lib/mysql/mysql.sock  -p
</code></pre>
<p>TCP连接（Linux，Windows）：<br>
目标	启动选项	默认值<br>
SERVER	--port=PORT	3306<br>
CLIENT	--protocol=TCP --port=PORT	3306</p>
<p>SOCKET连接（Linux）：<br>
目标	启动选项	默认值<br>
SERVER	--enable-named-pipe --socket=SOCKET	/tmp/mysql.sock<br>
CLIENT	--protocol=SOCKET --socket=SOCKET	/tmp/mysql.sock</p>
<p>PIPE连接（Windows）：<br>
目标	启动选项	默认值<br>
SERVER	--enable-named-pipe --socket=SOCKET	MYSQL<br>
CLIENT	--protocol=PIPE --socket=SOCKET	MYSQL</p>
<p>SHARED MEMORY连接（Windows）：<br>
目标	启动选项	默认值<br>
SERVER	--shared-memory --shared-memory-base-name=MEMORY	MySQL<br>
CLIENT	--protocol=MEMORY --shared-memory-base-name=MEMORY	MySQL</p>
]]></content>
    </entry>
</feed>